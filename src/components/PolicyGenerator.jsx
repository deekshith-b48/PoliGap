import React, { useState } from 'react';
import jsPDF from 'jspdf';
import { analyzeWithGemini } from '../lib/gemini';

function PolicyGenerator({ onNavigate }) {
  const [companyName, setCompanyName] = useState('');
  const [industry, setIndustry] = useState('');
  const [policyType, setPolicyType] = useState('');
  const [generating, setGenerating] = useState(false);
  const [generatedPolicy, setGeneratedPolicy] = useState('');
  const [error, setError] = useState('');
  const [progress, setProgress] = useState('');

  const industries = [
    'Technology', 'Healthcare', 'Financial Services', 'Education', 
    'Manufacturing', 'Retail', 'Government', 'Non-Profit', 'Other'
  ];

  const policyTypes = [
    { id: 'privacy', name: 'Privacy Policy', icon: '🔒', description: 'Data collection and user privacy' },
    { id: 'security', name: 'Security Policy', icon: '🛡️', description: 'Information security measures' },
    { id: 'employee', name: 'Employee Handbook', icon: '👥', description: 'Workplace policies and procedures' },
    { id: 'conduct', name: 'Code of Conduct', icon: '📋', description: 'Ethical guidelines and behavior' },
    { id: 'it', name: 'IT Policy', icon: '💻', description: 'Technology usage and guidelines' },
    { id: 'remote', name: 'Remote Work Policy', icon: '🏠', description: 'Telework guidelines and expectations' },
    { id: 'incident', name: 'Incident Response Policy', icon: '🚨', description: 'Emergency response procedures' },
    { id: 'data', name: 'Data Protection Policy', icon: '📊', description: 'Data handling and protection' }
  ];

  const generatePolicyPDF = async (policyContent, metadata) => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    
    // Modern header
    doc.setFillColor(59, 130, 246); // Blue gradient start
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text(metadata.title, margin, 25);
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`${metadata.companyName} | ${metadata.industry}`, margin, 35);
    
    // Content
    doc.setTextColor(0, 0, 0);
    let yPosition = 60;
    
    const lines = doc.splitTextToSize(policyContent, contentWidth);
    
    lines.forEach((line) => {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
      doc.text(line, margin, yPosition);
      yPosition += 6;
    });
    
    // Footer
    const totalPages = doc.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
      doc.text(`Generated by Policy.AI`, margin, pageHeight - 10);
    }
    
    return doc;
  };

  const handleGenerate = async () => {
    if (!companyName || !industry || !policyType) {
      setError('Please fill in all required fields');
      return;
    }

    setGenerating(true);
    setError('');
    setProgress('Initializing AI policy generation...');
    
    try {
      setProgress('Analyzing industry requirements...');
      
      const selectedPolicy = policyTypes.find(p => p.id === policyType);
      const prompt = `Generate a comprehensive ${selectedPolicy.name} for ${companyName}, a ${industry} company. 
      The policy should be professional, legally compliant, and industry-specific. 
      Include sections for purpose, scope, policy details, compliance requirements, and enforcement.
      Make it approximately 1000-1500 words and format it professionally.`;

      setProgress('Generating policy content with AI...');
      
      const response = await analyzeWithGemini(prompt);
      
      setProgress('Formatting and finalizing document...');
      
      setGeneratedPolicy(response);
      setProgress('');
      
    } catch (err) {
      console.error('Generation error:', err);
      setError(err.message || 'Failed to generate policy');
      setProgress('');
    } finally {
      setGenerating(false);
    }
  };

  const handleDownloadPDF = async () => {
    if (!generatedPolicy) return;
    
    try {
      const selectedPolicy = policyTypes.find(p => p.id === policyType);
      const metadata = {
        title: selectedPolicy.name,
        companyName,
        industry,
        generatedDate: new Date().toLocaleDateString()
      };
      
      const doc = await generatePolicyPDF(generatedPolicy, metadata);
      doc.save(`${companyName}_${selectedPolicy.name.replace(/\s+/g, '_')}.pdf`);
    } catch (err) {
      console.error('PDF generation error:', err);
      setError('Failed to generate PDF');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-soft border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <button
              onClick={() => onNavigate('home')}
              className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors focus-ring rounded-lg px-3 py-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              <span className="font-medium">Back to Home</span>
            </button>
            
            <div className="text-center">
              <h1 className="text-3xl font-bold text-gray-900">AI Policy Generator</h1>
              <p className="text-gray-600 mt-1">Create professional policies in minutes</p>
            </div>
            
            <div className="w-32"></div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-6 py-12">
        
        {/* Form Section */}
        <div className="bg-white rounded-3xl p-8 shadow-soft border border-gray-200 mb-8 animate-fadeInUp">
          <div className="flex items-center mb-8">
            <div className="w-12 h-12 bg-gradient-primary rounded-2xl flex items-center justify-center mr-4">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
              </svg>
            </div>
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Policy Configuration</h2>
              <p className="text-gray-600">Provide details to generate your custom policy</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Company Name */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Company Name *
              </label>
              <input
                type="text"
                value={companyName}
                onChange={(e) => setCompanyName(e.target.value)}
                placeholder="Enter your company name"
                className="w-full p-4 border border-gray-300 rounded-2xl bg-white text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
              />
            </div>

            {/* Industry */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Industry *
              </label>
              <select
                value={industry}
                onChange={(e) => setIndustry(e.target.value)}
                className="w-full p-4 border border-gray-300 rounded-2xl bg-white text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
              >
                <option value="">Select industry...</option>
                {industries.map((ind) => (
                  <option key={ind} value={ind}>{ind}</option>
                ))}
              </select>
            </div>
          </div>

          {/* Policy Type Selection */}
          <div className="mt-8">
            <label className="block text-sm font-semibold text-gray-700 mb-4">
              Policy Type *
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {policyTypes.map((policy) => (
                <label
                  key={policy.id}
                  className={`flex items-center p-4 border rounded-2xl cursor-pointer transition-all ${
                    policyType === policy.id
                      ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                      : 'border-gray-200 bg-gray-50 hover:bg-gray-100'
                  }`}
                >
                  <input
                    type="radio"
                    name="policyType"
                    value={policy.id}
                    checked={policyType === policy.id}
                    onChange={(e) => setPolicyType(e.target.value)}
                    className="sr-only"
                  />
                  <div className="flex-1">
                    <div className="flex items-center mb-2">
                      <span className="text-2xl mr-3">{policy.icon}</span>
                      <span className="font-semibold text-gray-900">{policy.name}</span>
                    </div>
                    <p className="text-sm text-gray-600">{policy.description}</p>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Generate Button */}
          <div className="mt-8">
            <button
              onClick={handleGenerate}
              disabled={generating || !companyName || !industry || !policyType}
              className="w-full bg-gradient-primary text-white text-lg font-semibold px-8 py-4 rounded-2xl btn-hover focus-ring disabled:bg-gray-400 disabled:cursor-not-allowed transition-all"
            >
              {generating ? (
                <div className="flex items-center justify-center">
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating Policy...
                </div>
              ) : (
                'Generate AI Policy'
              )}
            </button>
          </div>

          {/* Progress Indicator */}
          {progress && (
            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-2xl">
              <div className="flex items-center">
                <div className="w-5 h-5 bg-blue-500 rounded-full mr-3 animate-ai-pulse"></div>
                <p className="text-blue-800 font-medium">{progress}</p>
              </div>
            </div>
          )}

          {/* Error Display */}
          {error && (
            <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-2xl">
              <div className="flex items-start">
                <div className="w-5 h-5 bg-red-500 rounded-full mr-3 mt-0.5"></div>
                <div>
                  <p className="text-red-800 font-medium">Generation Error</p>
                  <p className="text-red-700 text-sm mt-1">{error}</p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Generated Policy Display */}
        {generatedPolicy && (
          <div className="bg-white rounded-3xl p-8 shadow-soft border border-gray-200 animate-fadeInUp">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center">
                <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center mr-4">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900">Generated Policy</h3>
                  <p className="text-gray-600">Review and download your custom policy</p>
                </div>
              </div>
              
              <button
                onClick={handleDownloadPDF}
                className="bg-gradient-to-br from-green-500 to-emerald-600 text-white px-6 py-3 rounded-2xl font-semibold btn-hover focus-ring"
              >
                <svg className="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Download PDF
              </button>
            </div>
            
            <div className="bg-gray-50 rounded-2xl p-6 max-h-96 overflow-y-auto scrollbar-hide">
              <pre className="whitespace-pre-wrap text-gray-800 text-sm leading-relaxed font-mono">
                {generatedPolicy}
              </pre>
            </div>
          </div>
        )}
        
      </main>
    </div>
  );
}

export default PolicyGenerator;
